{"version":3,"file":"logScheduler.js","sources":["../src/proxy/index.ts","../src/handler/index.js","../src/queue/base.ts","../src/queue/request.ts","../src/queue/log.ts","../src/queue/index.ts","../src/main.ts"],"sourcesContent":["export const rowImage=Image\nlet tag=false\n  // 重写原生的Image对象，做到监控项目中所有的打点\nexport function overrideImage(callback:(arg0:string)=>boolean){\n    if(tag){return}\n    tag=true\n    window.Image = function (width?:number|undefined,height?:number|undefined,) {\n      const img = new rowImage(width,height);\n      // 劫持对象中的src，当重设src时判断是否是打点请求\n      let proxy = new Proxy(img, {\n        get(target,prototype,receiver){\n            return Reflect.get(target, prototype, receiver)\n        },\n        set(target,prototype,value,receiver){\n          if(prototype=='src'){\n           if(callback(value)){\n            //当为打点信息时，走拦截器逻辑并在此处阻止打点请求\n              target[prototype]=''\n              return true\n           }\n          }\n          \n          return Reflect.set(target, prototype, value, receiver)\n        }\n      })\n      return proxy\n    } as unknown as new (width?: number | undefined, height?: number | undefined)=> HTMLImageElement\n  }\n","export default class RequestHandler {\n  // 对xhr进行重写，获取正在请求的xhr数目\n  constructor(interceptor={}) {\n    this.interceptor=interceptor\n     this.setRequestHandler();\n     this.setResponseHandler();\n  }\n  //劫持xhr，在每次请求时出发请求拦截器\n  setRequestHandler() {\n    const { open, send } = XMLHttpRequest.prototype;\n    const vm=this\n    XMLHttpRequest.prototype.open = function (method, url, async, user, password) {\n      vm.interceptor.request(url)\n      open.apply(this, arguments);\n    };\n  }\n  // 对请求和图片请求成功的毁掉添加响应拦截，避免劫持xhr响应回掉时跟其他SDK的冲突\n  setResponseHandler(){\n    const vm=this\n    let observer = new PerformanceObserver(function (entries, observer) {\n      entries.getEntries().forEach((entry) => {\n          if(['img','xmlhttprequest'].includes(entry.initiatorType)){\n            vm.interceptor.response(entry.name)\n          }\n      });\n    });\n    observer.observe({ entryTypes: ['resource'] });\n  }\n}\n","//队列基类\nexport default class BaseList{\n    list:string[]=[]\n    constructor(){\n    }\n    add(item:string){\n      this.list.push(item)\n    }\n    delete(deletedItem:string){\n      const deletedIndex=this.list.findIndex(item=>item==deletedItem)\n      deletedIndex!=-1 && this.list.splice(deletedIndex,1)\n    }\n    getLength(){\n      return this.list.length\n    }\n    clear(){\n       while(this.list.length){\n        this.list.pop()\n       }\n    }\n  }","import BaseList from './base'\n//设置节点变动监控，当变化时查找新的图片请求\nfunction setImageDomObserve(callback:()=>void){\n    let targetNode = document.querySelector(\"body\")||document.createElement('div');\n    let observerOptions = {\n      childList: true, \n      attributes: true, \n      subtree: true    \n    }\n    let observer = new MutationObserver(callback);\n    observer.observe(targetNode, observerOptions);\n  }\n  \n  // 请求队列\n  export default class RequestList extends BaseList {\n    constructor() {\n      super()\n      setImageDomObserve(this.getCurrentImageResquest.bind(this))\n    }\n    // 查找出目前正在发生的图片请求\n    getCurrentImageResquest(){\n       const imageList=Array.from(document.querySelectorAll('img[src]')) as HTMLImageElement[]\n       imageList.filter(img=>!img.complete).forEach(img=>{\n            this.add(img.currentSrc)\n            img.addEventListener('error',()=>{\n              this.delete(img.currentSrc)\n            })\n       })\n    }\n  }","import BaseList from './base'\nimport { rowImage } from '../proxy'\n//打点队列\nexport default class LogList extends BaseList{\n    options:any\n    constructor(options={}){\n      super()\n      this.options=options\n    }\n    // 判断是否是log\n    isLogger(url:string):boolean {\n      const logReg=new RegExp(this.options.log || /.gif/)\n      if (typeof url !== 'string') {\n        return false;\n      }\n      if (logReg.test(url)) {\n        return true;\n      }\n      return false;\n    }\n     async requestLog(){\n        const requestList=this.list.map(url=>{\n          return new Promise((reslove)=>{\n              const img=new rowImage()\n              img.src=url\n              reslove(url)\n          })\n        })\n        await Promise.all(requestList)\n     }\n  }","import RequestList from './request'\nimport LogList from './log'\nlet request:RequestList|null=null\nlet log:LogList|null=null\n//这里工厂+单例，方便后期动态修改或添加配置\nexport function requestListFactory():RequestList{\n    if(!request){\n      return new RequestList()\n    }\n    return request\n}\nexport function logListFactory(options:any):LogList{\n   if(!log){\n    return new LogList(options)\n   }\n   return log\n}\n// 解耦工具类，将主类和队列类进行解耦\nexport class InterceptorIOCTool{\n  requestList:RequestList\n  logList:LogList\n  constructor(requestList:RequestList,logList:LogList){\n      this.requestList=requestList\n      this.logList=logList\n  }\n  createRequestInterceptor(){\n    const vm=this\n    return function(url:string){\n      if(vm.logList.isLogger(url)){\n        vm.logList.add(url)\n        return true\n      }\n      vm.requestList.add(url)\n      return false\n    }\n  }\n  createResponseInterceptor(){\n    const vm=this\n    return function(url:string){\n      if(!vm.logList.isLogger(url)){\n        vm.requestList.delete(url)\n      } else{\n        // 如果是log,直接返回，防止递归死循环\n        return false\n      }\n      if(vm.requestList.getLength()==0){\n          vm.logList.requestLog()\n      }\n      return true\n    }\n  }\n}\n","import {overrideImage} from './proxy';\nimport RequestHandler from './handler';\nimport {requestListFactory,logListFactory} from './queue/index'\nimport {InterceptorIOCTool} from './queue/index'\ninterface InitInterceptor{\n    request:any,\n    response:any\n}\nexport default class logScheduler {\n  options:any;\n  requestHandler:any;\n  requestList:any\n  logList:any;\n  interceptor:InitInterceptor={\n    request:null,\n    response:null\n  };\n  constructor(options:any) {\n    this.options=options;\n    this.initRequestQueue()\n    this.initInterceptor()\n    this.initObserver();\n  }\n  // 初始化图片劫持和请求观测\n  initObserver() {\n    overrideImage(this.interceptor.request)\n    this.requestHandler = new RequestHandler(this.interceptor);\n  }\n  // 初始化请求队列和打点队列\n  initRequestQueue(){\n      this.requestList=requestListFactory()\n      this.logList=logListFactory(this.options)\n  }\n  // 初始化拦截器\n  initInterceptor(){\n      const interceptorIOCTool=new InterceptorIOCTool(\n        this.requestList,this.logList\n      )\n      this.interceptor.request=interceptorIOCTool.createRequestInterceptor()\n      this.interceptor.response=interceptorIOCTool.createResponseInterceptor()\n  }\n}\n"],"names":["rowImage","tag","overrideImage","callback","width","height","img","target","prototype","receiver","value","RequestHandler","interceptor","open","send","vm","method","url","async","user","password","entries","observer","entry","BaseList","__publicField","item","deletedItem","deletedIndex","setImageDomObserve","targetNode","observerOptions","RequestList","LogList","options","logReg","requestList","reslove","requestListFactory","logListFactory","InterceptorIOCTool","logList","logScheduler","interceptorIOCTool"],"mappings":"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"}