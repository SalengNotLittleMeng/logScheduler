{"version":3,"file":"logScheduler.js","sources":["../src/proxy/index.ts","../src/handler/index.ts","../src/queue/base.ts","../src/queue/request.ts","../src/queue/log.ts","../src/queue/index.ts","../src/options/default.ts","../src/main.ts"],"sourcesContent":["export const rowImage=Image\nlet tag=false\n  // 重写原生的Image对象，做到监控项目中所有的打点\nexport function overrideImage(callback:(arg0:string)=>boolean){\n    if(tag){return}\n    tag=true\n    window.Image = function (width?:number|undefined,height?:number|undefined,) {\n      const img = new rowImage(width,height);\n      // 劫持对象中的src，当重设src时判断是否是打点请求\n      let proxy = new Proxy(img, {\n        get(target,prototype,receiver){\n            return Reflect.get(target, prototype, receiver)\n        },\n        set(target,prototype,value,receiver){\n          if(prototype=='src'){\n           if(callback(value)){\n            //当为打点信息时，走拦截器逻辑并在此处阻止打点请求\n              target[prototype]=''\n              return true\n           }\n          }\n          \n          return Reflect.set(target, prototype, value, receiver)\n        }\n      })\n      return proxy\n    } as unknown as new (width?: number | undefined, height?: number | undefined)=> HTMLImageElement\n  }\n","export default class RequestHandler {\n  // 对xhr进行重写，获取正在请求的xhr数目\n  interceptor\n  constructor(interceptor:Interceptor) {\n    this.interceptor=interceptor\n     this.setRequestHandler();\n     this.setResponseHandler();\n  }\n  //劫持xhr，在每次请求时出发请求拦截器\n  setRequestHandler() {\n    const { open } = XMLHttpRequest.prototype;\n    const vm=this\n    XMLHttpRequest.prototype.open = function (this:any,method, url, async, user, password) {\n      vm.interceptor.request(url)\n      open.call(this, method,url,async,user,password);\n    } as { \n      (method: string, url: string | URL): void;\n      (method: string, url: string | URL, async: boolean, username?: string | null | undefined, password?: string | null | undefined): void;\n        }\n  }\n  // 对请求和图片请求成功的毁掉添加响应拦截，避免劫持xhr响应回掉时跟其他SDK的冲突\n  setResponseHandler(){\n    const vm=this\n    let observer = new PerformanceObserver(function (entries) {\n      entries.getEntries().forEach((entry) => {\n        console.log('23')\n          if(['img','xmlhttprequest'].includes((entry as PerformanceEntryResource).initiatorType)){\n            vm.interceptor.response(entry.name)\n          }\n      });\n    });\n    observer.observe({ entryTypes: ['resource'] });\n  }\n}\n","//队列基类\nexport default class BaseList{\n    list:string[]=[]\n    constructor(){\n    }\n    add(item:string){\n      this.list.push(item)\n    }\n    delete(deletedItem:string){\n      const deletedIndex=this.list.findIndex(item=>item==deletedItem)\n      deletedIndex!=-1 && this.list.splice(deletedIndex,1)\n    }\n    getLength(){\n      return this.list.length\n    }\n    clear(){\n       while(this.list.length){\n        this.list.pop()\n       }\n    }\n  }","import BaseList from './base'\n//设置节点变动监控，当变化时查找新的图片请求\nfunction setImageDomObserve(callback:()=>void){\n    let targetNode = document.querySelector(\"body\")||document.createElement('div');\n    let observerOptions = {\n      childList: true, \n      attributes: true, \n      subtree: true    \n    }\n    let observer = new MutationObserver(callback);\n    observer.observe(targetNode, observerOptions);\n  }\n  \n  // 请求队列\n  export default class RequestList extends BaseList {\n    constructor() {\n      super()\n      setImageDomObserve(this.getCurrentImageResquest.bind(this))\n    }\n    // 这里增加异步操作，考虑请求连续增长的问题\n    async getLengthAsync(): Promise<number>{\n      return new Promise((reslove)=>{\n          setTimeout(()=>{\n            reslove(this.getLength())\n          },0)\n      })\n    }\n    // 查找出目前正在发生的图片请求\n    getCurrentImageResquest(){\n       const imageList=Array.from(document.querySelectorAll('img[src]')) as HTMLImageElement[]\n       imageList.filter(img=>!img.complete).forEach(img=>{\n            this.add(img.currentSrc)\n            // 由于perfromceObsever无法检测到加载失败，因此需要手动增加监听器出队列\n            img.addEventListener('error',()=>{\n              this.delete(img.currentSrc)\n            })\n       })\n    }\n  }","import BaseList from './base'\nimport { rowImage } from '../proxy'\n//打点队列\nexport default class LogList extends BaseList{\n    options:Options;\n    getCurrentRequestFn:()=>Promise<number>;\n    constructor(options:Options){\n      super()\n      this.options=options;\n    }\n    async add(item: string): Promise<void>{\n      this.list.push(item) \n      // 当前本身就是空置时直接触发\n      if(await this.getCurrentRequestFn()<=this.options.trigger){\n          this.requestLog()\n      }\n    }\n    // 获取请求数目的接口\n    getCurrentRequestImpl(getCurrentRequestFn:()=>Promise<number>){\n       this.getCurrentRequestFn=getCurrentRequestFn\n    }\n    // 判断是否是log\n    isLogger(url:url):boolean {\n      const logReg=new RegExp(this.options.log)\n      if (typeof url !== 'string') {\n        return false;\n      }\n      if (logReg.test(url)) {\n        return true;\n      }\n      return false;\n    }\n     async requestLog(){\n      this.list.forEach(url=>{\n        imagePromiseFactory(url)\n      })\n      this.clear()\n      }\n  }\n\n  function imagePromiseFactory(url:string){\n    return new Promise<any>((reslove)=>{\n      const img=new rowImage()\n      img.src=url\n      img.onload=function(){\n        reslove(url)\n      }\n      img.onerror=function(){\n        reslove(url)\n      }\n  })\n  }","import RequestList from './request'\nimport LogList from './log'\nlet request:RequestList|null=null\nlet log:LogList|null=null\n//这里工厂+单例，方便后期动态修改或添加配置\nexport function requestListFactory():RequestList{\n    if(!request){\n      return new RequestList()\n    }\n    return request\n}\nexport function logListFactory(options:Options):LogList{\n   if(!log){\n    return new LogList(options)\n   }\n   return log\n}\n// 解耦工具类，将主类和队列类进行解耦\nexport class InterceptorIOCTool{\n  requestList:RequestList\n  logList:LogList\n  constructor(requestList:RequestList,logList:LogList){\n      this.requestList=requestList\n      this.logList=logList\n      this.logList.getCurrentRequestImpl(this.getCurrentRequest.bind(this))\n  }\n  getCurrentRequest(){\n     return this.requestList.getLengthAsync()\n  }\n  createRequestInterceptor(){\n    const vm=this\n    return function(url:url){\n      if(vm.logList.isLogger(url)){\n        vm.logList.add(url.toString())\n        return true\n      }\n      vm.requestList.add(url.toString())\n      return false\n    }\n  }\n  createResponseInterceptor(options:Options){\n    const vm=this\n    return async function(url:string | URL){\n      if(!vm.logList.isLogger(url)){\n        vm.requestList.delete(url.toString())\n      } else{\n        // 如果是log,直接返回，防止递归死循环\n        return false\n      }\n      if(await vm.requestList.getLengthAsync()<=options.trigger){\n          vm.logList.requestLog()\n      }\n      return true\n    }\n  }\n}\n","// 默认配置对象\nconst defaultOptions={ \n    max:5,  \n    trigger:3,\n    log:/log.gif/\n}\n\nexport function mergeOptions(userOptions:Options){\n    // 目前直接合并，之后如果有数组和对象配置需要考虑扩展\n   return Object.assign(defaultOptions,userOptions)\n}","import {overrideImage} from './proxy';\nimport RequestHandler from './handler';\nimport {requestListFactory,logListFactory} from './queue/index'\nimport {InterceptorIOCTool} from './queue/index'\nimport {mergeOptions} from './options/default'\nimport RequestList from './queue/request';\nimport LogList from './queue/log';\nexport default class logScheduler {\n  options:Options;\n  requestHandler:RequestHandler;\n  requestList:RequestList;\n  logList:LogList;\n  interceptor:Interceptor={\n    request:()=>{return true},\n    response:()=>{return new Promise((reslove)=>{reslove(true)})}\n  };\n  constructor(options:any) {\n    this.options=mergeOptions(options)\n    this.initRequestQueue()\n    this.initInterceptor()\n    this.initObserver();\n  }\n  // 初始化图片劫持和请求观测\n  initObserver() {\n    overrideImage(this.interceptor.request)\n    this.requestHandler = new RequestHandler(this.interceptor);\n  }\n  // 初始化请求队列和打点队列\n  initRequestQueue(){\n      this.requestList=requestListFactory()\n      this.logList=logListFactory(this.options)\n  }\n  // 初始化拦截器\n  initInterceptor(){\n      const interceptorIOCTool=new InterceptorIOCTool(\n        this.requestList,this.logList\n      )\n      this.interceptor.request=interceptorIOCTool.createRequestInterceptor()\n      this.interceptor.response=interceptorIOCTool.createResponseInterceptor(this.options)\n  }\n}\n"],"names":["rowImage","tag","overrideImage","callback","width","height","img","target","prototype","receiver","value","RequestHandler","interceptor","__publicField","open","vm","method","url","async","user","password","entries","entry","BaseList","item","deletedItem","deletedIndex","setImageDomObserve","targetNode","observerOptions","RequestList","reslove","LogList","options","getCurrentRequestFn","logReg","imagePromiseFactory","requestListFactory","logListFactory","InterceptorIOCTool","requestList","logList","defaultOptions","mergeOptions","userOptions","logScheduler","interceptorIOCTool"],"mappings":"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"}