{"version":3,"file":"logScheduler.js","sources":["../src/proxy/index.js","../src/handler/index.js","../src/queue/base.js","../src/queue/request.js","../src/queue/log.js","../src/queue/index.js","../src/main.js"],"sourcesContent":["export const rowImage=Image\nlet tag=false\n  // 重写原生的Image对象，做到监控项目中所有的打点\nexport function overrideImage(callback){\n    if(tag){return}\n    tag=true\n    window.Image = function (...params) {\n      const img = new rowImage(...params);\n      let val = '';\n      // 劫持对象中的src，当重设src时判断是否是打点请求\n      let proxy = new Proxy(img, {\n        get(target,prototype){\n            return target[prototype]\n        },\n        set(target,prototype,value){\n          if(prototype=='src'){\n           if(callback(value)){\n            //当为打点信息时，走拦截器逻辑并在此处阻止打点请求\n              target[prototype]=''\n              return true\n           }\n          }\n          target[prototype]=value\n          return true\n        }\n      })\n      return proxy\n    }\n  }\n","export default class RequestHandler {\n  // 对xhr进行重写，获取正在请求的xhr数目\n  constructor(interceptor={}) {\n    this.interceptor=interceptor\n     this.setRequestHandler();\n     this.setResponseHandler();\n  }\n  //劫持xhr，在每次请求时出发请求拦截器\n  setRequestHandler() {\n    const { open, send } = XMLHttpRequest.prototype;\n    const vm=this\n    XMLHttpRequest.prototype.open = function (method, url, async, user, password) {\n      vm.interceptor.resquest(url)\n      open.apply(this, arguments);\n    };\n  }\n  // 对请求和图片请求成功的毁掉添加响应拦截，避免劫持xhr响应回掉时跟其他SDK的冲突\n  setResponseHandler(){\n    const vm=this\n    let observer = new PerformanceObserver(function (entries, observer) {\n      entries.getEntries().forEach((entry) => {\n          if(['img','xmlhttprequest'].includes(entry.initiatorType)){\n            vm.interceptor.response(entry.name)\n          }\n      });\n    });\n    observer.observe({ entryTypes: ['resource'] });\n  }\n}\n","//队列基类\nexport default class BaseList{\n    constructor(){\n      this.list=[]\n    }\n    add(item){\n      this.list.push(item)\n    }\n    delete(deletedItem){\n      const deletedIndex=this.list.findIndex(item=>item==deletedItem)\n      deletedIndex!=-1 && this.list.splice(deletedIndex,1)\n    }\n    getLength(){\n      return this.list.length\n    }\n    clear(){\n       while(this.list.length){\n        this.list.pop()\n       }\n    }\n  }","import BaseList from './base'\n//设置节点变动监控，当变化时查找新的图片请求\nfunction setImageDomObserve(callback){\n    let targetNode = document.querySelector(\"body\");\n    let observerOptions = {\n      childList: true, \n      attributes: true, \n      subtree: true    \n    }\n    \n    let observer = new MutationObserver(callback);\n    observer.observe(targetNode, observerOptions);\n  }\n  \n  // 请求队列\n  export default class RequestList extends BaseList {\n    constructor() {\n      super()\n      setImageDomObserve(this.getCurrentImageResquest.bind(this))\n    }\n    // 查找出目前正在发生的图片请求\n    getCurrentImageResquest(){\n       const imageList= Array.from(document.querySelectorAll('img[src]'))\n       imageList.filter(img=>!img.complete).forEach(img=>{\n            this.add(img.currentSrc)\n            img.addEventListener('error',()=>{\n              this.delete(img.currentSrc)\n            })\n       })\n    }\n  }","import BaseList from './base'\nimport { rowImage } from '../proxy'\n//打点队列\nexport default class LogList extends BaseList{\n    constructor(options={}){\n      super()\n      this.options=options\n    }\n    // 判断是否是log\n    isLogger(url) {\n      const logReg=new RegExp(this.options.log || /.gif/)\n      if (typeof url !== 'string') {\n        return false;\n      }\n      if (logReg.test(url)) {\n        return true;\n      }\n      return false;\n    }\n     async requestLog(){\n        const requestList=this.list.map(url=>{\n          return new Promise((reslove,reject)=>{\n              const img=new rowImage()\n              img.src=url\n              reslove()\n          })\n        })\n        await Promise.all(requestList)\n     }\n  }","import RequestList from './request'\nimport LogList from './log'\nlet request=null\nlet log=null\n//这里工厂+单例，方便后期动态修改或添加配置\nexport function requestListFactory(options){\n    if(!request){\n      return new RequestList(options)\n    }\n    return request\n}\nexport function logListFactory(options){\n   if(!log){\n    return new LogList(options)\n   }\n   return log\n}\n// 解耦工具类，将主类和队列类进行解耦\nexport class InterceptorIOCTool{\n  constructor(requestList,logList,options={}){\n      this.requestList=requestList\n      this.logList=logList\n  }\n  createRequestInterceptor(){\n    return function(url){\n      if(this.logList.isLogger(url)){\n        this.logList.add(url)\n        return true\n      }\n      this.requestList.add(url)\n      return false\n    }.bind(this)\n  }\n  createResponseInterceptor(){\n    return function(url){\n      if(!this.logList.isLogger(url)){\n        this.requestList.delete(url)\n      } else{\n        // 如果是log,直接返回，防止递归死循环\n        return\n      }\n      if(this.requestList.getLength()==0){\n          this.logList.requestLog()\n      }\n    }.bind(this)\n  }\n}\n","import {overrideImage} from './proxy';\nimport RequestHandler from './handler';\nimport {requestListFactory,logListFactory} from './queue/index'\nimport {InterceptorIOCTool} from './queue/index'\nexport default class logScheduler {\n  constructor(options) {\n    this.options = options;\n    this.requestHandler = null;\n    this.requestList=null;\n    this.logList=null;\n    this.interceptor={}\n    this.initRequestQueue()\n    this.initInterceptor()\n    this.initObserver();\n  }\n  // 初始化图片劫持和请求观测\n  initObserver() {\n    overrideImage(this.initInterceptor.resquest)\n    this.requestHandler = new RequestHandler(this.initInterceptor);\n  }\n  // 初始化请求队列和打点队列\n  initRequestQueue(){\n      this.requestList=requestListFactory(this.options)\n      this.logList=logListFactory(this.options)\n  }\n  // 初始化拦截器\n  initInterceptor(){\n      const interceptorIOCTool=new InterceptorIOCTool(\n        this.requestList,this.logList\n      )\n      this.initInterceptor.resquest=interceptorIOCTool.createRequestInterceptor()\n      this.initInterceptor.response=interceptorIOCTool.createResponseInterceptor()\n  }\n}\n"],"names":["rowImage","tag","overrideImage","callback","params","img","target","prototype","value","RequestHandler","interceptor","open","send","vm","method","url","async","user","password","entries","observer","entry","BaseList","item","deletedItem","deletedIndex","setImageDomObserve","targetNode","observerOptions","RequestList","LogList","options","logReg","requestList","reslove","reject","requestListFactory","logListFactory","InterceptorIOCTool","logList","logScheduler","interceptorIOCTool"],"mappings":"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"}