{"version":3,"file":"logScheduler.js","sources":["../src/proxy/index.ts","../src/queue/base.ts","../src/queue/request.ts","../src/queue/log.ts","../src/queue/index.ts","../src/handler/index.ts","../src/utils.ts","../src/options/default.ts","../src/main.ts"],"sourcesContent":["export const rowImage=Image\nlet tag=false\n  // 重写原生的Image对象，做到监控项目中所有的打点\nexport function overrideImage(callback:(arg0:string,arg1:LogType)=>boolean){\n    if(tag){return}\n    tag=true\n    window.Image = function (width?:number|undefined,height?:number|undefined,) {\n      const img = new rowImage(width,height);\n      // 劫持对象中的src，当重设src时判断是否是打点请求\n      let proxy = new Proxy(img, {\n        get(target,prototype,receiver){\n            return Reflect.get(target, prototype, receiver)\n        },\n        set(target,prototype,value,receiver){\n          if(prototype=='src'){\n           if(callback(value,'image')){\n            //当为打点信息时，走拦截器逻辑并在此处阻止打点请求\n              target[prototype]=''\n              return true\n           }\n          }  \n          return Reflect.set(target, prototype, value, receiver)\n        }\n      })\n      return proxy\n    } as unknown as new (width?: number | undefined, height?: number | undefined)=> HTMLImageElement\n  }\n","//队列范型类\nexport default class BaseList<T>{\n    list:Array<T>=[]\n    constructor(){\n    }\n    add(item:T){\n      this.list.push(item)\n    }\n    delete(deletedItem:T){\n      const deletedIndex=this.list.findIndex(item=>item==deletedItem)\n      deletedIndex!=-1 && this.list.splice(deletedIndex,1)\n    }\n    getLength(){\n      return this.list.length\n    }\n    includes(item:T){\n      return this.list.includes(item)\n    }\n    clear(){\n       while(this.list.length){\n        this.list.pop()\n       }\n    }\n  }","import BaseList from './base'\n//设置节点变动监控，当变化时查找新的图片请求\nfunction setImageDomObserve(callback:()=>void){\n    let targetNode = document.querySelector(\"body\")||document.createElement('div');\n    let observerOptions = {\n      childList: true, \n      attributes: true, \n      subtree: true    \n    }\n    let observer = new MutationObserver(callback);\n    observer.observe(targetNode, observerOptions);\n  }\n  \n  // 请求队列\n  export default class RequestList extends BaseList<string> {\n    constructor() {\n      super()\n      setImageDomObserve(this.getCurrentImageResquest.bind(this))\n    }\n    // 这里增加异步操作，考虑请求连续增长的问题\n    async getLengthAsync(): Promise<number>{\n      return new Promise((reslove)=>{\n          setTimeout(()=>{\n            reslove(this.getLength())\n          },0)\n      })\n    }\n    // 查找出目前正在发生的图片请求\n    getCurrentImageResquest(){\n       const imageList=Array.from(document.querySelectorAll('img[src]')) as HTMLImageElement[]\n       imageList.filter(img=>!img.complete).forEach(img=>{\n            this.add(img.currentSrc)\n       })\n    }\n  }","import BaseList from './base'\nimport { rowImage } from '../proxy'\n//打点队列\nexport default class LogList extends BaseList<LogListItem>{\n    options:Options;\n    getCurrentRequestFn:()=>Promise<number>;\n    constructor(options:Options){\n      super()\n      this.options=options;\n    }\n    async add(item: LogListItem): Promise<void>{\n      this.list.push(item) \n      // 当前本身就是空置时直接触发\n      if(await this.getCurrentRequestFn()<=this.options.trigger){\n          this.requestLog()\n      }\n    }\n    // 获取请求数目的接口\n    getCurrentRequestImpl(getCurrentRequestFn:()=>Promise<number>){\n       this.getCurrentRequestFn=getCurrentRequestFn\n    }\n    // 判断是否是log\n    isLogger(url:url):boolean {\n      const logRegList=this.options.log.map(item=>{\n        return new RegExp(item)\n      })\n      if (typeof url !== 'string') {\n        return false;\n      }\n      if (logRegList.some(reg=>{\n        return reg.test(url)\n      })) {\n        return true;\n      }\n      return false;\n    }\n    // 执行请求\n     async requestLog(){\n      this.list.map(logInfoItem=>{\n        this.delete(logInfoItem)\n        switch(logInfoItem.type){\n          case 'xhr':{\n            xhrPromiseFactory(logInfoItem as LogListItemXhr)\n            break;\n          }\n          case 'image':{\n            imagePromiseFactory(logInfoItem.url)\n            break;\n          }\n        }\n      })\n      }\n  }\n  function xhrPromiseFactory(logInfoItem:LogListItemXhr){\n    return new Promise<string>((resolve)=>{\n        try{\n          const xhr=logInfoItem.instance\n          xhr.addEventListener(\"load\", function () {\n            if (xhr.readyState == 4 && xhr.status == 200) {\n                resolve(logInfoItem.url)\n            }\n          });\n          xhr.addEventListener(\"error\",function(){\n              resolve(logInfoItem.url)\n          })\n          logInfoItem.instance.send(logInfoItem.data)\n        }catch(e){}\n    })\n  }\n  function imagePromiseFactory(url:string){\n    return new Promise<string>((reslove)=>{\n      const img=new rowImage()\n      img.src=url\n      img.onload=function(){\n        reslove(url)\n      }\n      img.onerror=function(){\n        reslove(url)\n      }\n  })\n  }","import RequestList from './request'\nimport LogList from './log'\nlet request:RequestList|null=null\nlet log:LogList|null=null\n//这里工厂+单例，方便后期动态修改或添加配置\nexport function requestListFactory():RequestList{\n    if(!request){\n      return new RequestList()\n    }\n    return request\n}\nexport function logListFactory(options:Options):LogList{\n   if(!log){\n    return new LogList(options)\n   }\n   return log\n}\nexport function logObjectFactory(url:url,type:LogType,xhrInstance?:XMLHttpRequest,data?:XMLHttpRequestData):LogListItem{\n  return {\n    url:url.toString(),\n    type,\n    instance:xhrInstance,\n    data\n  }\n}\n// 解耦工具类，将主类和队列类进行解耦\nexport class InterceptorIOCTool{\n  requestList:RequestList\n  logList:LogList\n  constructor(requestList:RequestList,logList:LogList){\n      this.requestList=requestList\n      this.logList=logList\n      this.logList.getCurrentRequestImpl(this.getCurrentRequest.bind(this))\n  }\n  getCurrentRequest(){\n     return this.requestList.getLengthAsync()\n  }\n  createRequestInterceptor(){\n    const vm=this\n    return function(url:url,type:LogType){\n      const logObject=logObjectFactory(url,type)\n      if(vm.logList.isLogger(url)){\n        vm.logList.add(logObject)\n        return true\n      }\n      vm.requestList.add(url.toString())\n      return false\n    }\n  }\n  createResponseInterceptor(options:Options){\n    const vm=this\n    return async function(url:string | URL){\n      if(!vm.logList.isLogger(url)){\n        vm.requestList.delete(url.toString())\n      } else{\n        // 如果是log,直接返回，防止递归死循环\n        return false\n      }\n      if(await vm.requestList.getLengthAsync()<=options.trigger){\n          vm.logList.requestLog()\n      }\n      return true\n    }\n  }\n}\n","import LogList from \"../queue/log\";\nimport {logObjectFactory} from '../queue/index'\nexport default class RequestHandler {\n  // 对xhr进行重写，获取正在请求的xhr数目\n  private interceptor;\n  private requestAbleList;\n  constructor(interceptor:Interceptor,requestAbleList:RequestAbleList) {\n    this.interceptor=interceptor\n    this.requestAbleList=requestAbleList\n     this.setRequestHandler();\n     this.setResponseHandler();\n  }\n  //劫持xhr，在每次请求时出发请求拦截器\n  setRequestHandler() {\n    const { open,send } = XMLHttpRequest.prototype;\n    const vm=this\n    XMLHttpRequest.prototype.open = function (this:any,method, url, async, user, password) {\n      vm.interceptor.request(url,'xhr')\n      open.call(this, method,url,async,user,password);\n    } as { \n      (method: string, url: string | URL): void;\n      (method: string, url: string | URL, async: boolean, username?: string | null | undefined, password?: string | null | undefined): void;\n        }\n    XMLHttpRequest.prototype.send=function(data:Document|XMLHttpRequestBodyInit|null|undefined){\n        if(vm.requestAbleList.include(this.responseURL)){\n           vm.requestAbleList.add(this.responseURL,this,data)\n           return\n        }\n        send.call(this,data)\n    }\n  }\n  // 对请求和图片请求成功的毁掉添加响应拦截，避免劫持xhr响应回掉时跟其他SDK的冲突\n  setResponseHandler(){\n    const vm=this\n    let observer = new PerformanceObserver(function (entries) {\n      entries.getEntries().forEach((entry) => {\n          if(['img','xmlhttprequest'].includes((entry as PerformanceEntryResource).initiatorType)){\n            vm.interceptor.response(entry.name)\n          }\n      });\n    });\n    observer.observe({ entryTypes: ['resource'] });\n  }\n} \n// XHR打点请求类\nexport class RequestAbleList{\n  public requestAbleList:string[]\n  private logList:LogList\n  constructor(logList:LogList){\n    this.logList=logList\n  }\n  include(url:string){\n    return this.logList.list.find(logItem=>{\n        return logItem.url===url\n    })\n  }\n  add(url:string,xhr:XMLHttpRequest,data:XMLHttpRequestData){\n    this.logList.add(logObjectFactory(url,'xhr',xhr,data))\n  }\n}\n\n\n","// 并发控制函数，每当一个请求返回就会执行下一个\nexport function  multiRequest(urls:string[], maxNum:number,\n    decorator:(url:string)=>Promise<undefined>){\n    let count=0\n    return new Promise(function(resolve){\n        while(count<maxNum){\n        next()\n        count++\n    }\n    function next(){\n        console.log(count,urls)\n        if(count>urls.length){\n            resolve(count)\n            return\n        }\n        decorator(urls[count]).finally(()=>{\n            count++\n            next()\n        })\n    }\n    })\n}\n\nexport enum CloneType {\n    Object = \"Object\",\n    Array = \"Array\",\n    Date = \"Date\",\n    RegExp = \"RegExp\",\n    Function = \"Function\",\n    String = \"String\",\n    Number = \"Number\",\n    Boolean = \"Boolean\",\n    Undefined = \"Undefined\",\n    Null = \"Null\",\n    Symbol = \"Symbol\",\n    Set = \"Set\",\n    Map = \"Map\"\n}\n\nexport type _CloneType = keyof typeof CloneType\n\n/**\n * 检测数据类型\n * @param type cloneType\n * @param obj 检测的数据源\n * @returns Boolean\n */\nfunction isType<T>(type: _CloneType, obj: T) {\n    return Object.prototype.toString.call(obj) === `[object ${type}]`;\n}\n\n/**\n * 深拷贝\n * @param obj 要克隆的对象\n * @param cache 缓存对象，用于解决循环引用的问题\n *  */\nexport function cloneDeep<T>(obj: T, cache = new WeakMap()): T {\n    // 如果不是对象或者是null，直接返回（终止条件）\n    if (typeof obj !== 'object' || obj === null) {\n        return obj\n    }\n\n    // 如果类型是Symbol，直接返回一个新的Symbol\n    if (isType(CloneType.Symbol, obj)) {\n        return obj.constructor((obj as unknown as Symbol).description)\n    }\n    // 如果已经缓存过，直接返回缓存的值\n    if (cache.has(obj)) {\n        return cache.get(obj)\n    }\n\n    // 初始化返回结果\n    let temp: T, param: T\n    // 如果是日期对象，直接返回一个新的日期对象\n    if (isType(CloneType.Date, obj) || isType(CloneType.RegExp, obj)) {\n        param = obj\n    }\n    // @ts-ignore\n    temp = new obj!.constructor(param)\n    // 如果是数组或者对象，需要遍历\n    if (isType(CloneType.Array, obj) || isType(CloneType.Object, obj)) {\n        Object.keys(obj)\n            .forEach(key => {\n                if (obj.hasOwnProperty(key)) {\n                        // @ts-ignore\n                    \n                    temp[key] = cloneDeep(obj[key], cache)\n                }\n            })\n    }\n    // 如果是Set\n    if (isType(CloneType.Set, obj)) {\n        for (let value of (obj as unknown as Set<T>)) {\n            (temp as Set<T>).add(cloneDeep(value, cache))\n        }\n    }\n    // 如果是Map\n    if (isType(CloneType.Map, obj)) {\n        for (let [key, value] of (obj as unknown as Map<T, T>)) {\n            (temp as Map<T, T>).set(cloneDeep(key, cache), cloneDeep(value, cache))\n        }\n    }\n    // 缓存值\n    cache.set(obj, temp)\n    return temp\n  }","import {cloneDeep} from '../utils'\n// 默认配置对象\nconst defaultOptions={ \n    max:5,  \n    trigger:3,\n    log:[]\n}\n\nexport function mergeOptions(userOptions:Options){\n    // 这里要考虑数组的扩展问题\n    const baseOptions:Options=cloneDeep(defaultOptions)\n   Object.keys(baseOptions).forEach((key)=>{\n        if(Array.isArray(baseOptions[key])){\n            if(Array.isArray(userOptions[key])){\n                baseOptions[key] =  (baseOptions[key] as LogOptionItem[]).concat(userOptions[key])\n            }else{\n                userOptions[key] && (baseOptions[key] as LogOptionItem[]).push(userOptions[key])\n            }\n        }else{\n           ( baseOptions[key] as number)=userOptions[key] as number\n           ?userOptions[key]:baseOptions[key]\n        }\n   })\n   baseOptions.log=baseOptions.log.filter(item=>item)\n   return baseOptions\n}\n// 扩展配置\nexport function extendOptions(options:Options,key:string,value:any){\n    if(Array.isArray(options[key])){\n        options[key].push(value)\n    }else if(typeof options[key] === 'object' || options[key] !== null){\n        options[key]={\n            ...options[key],\n            ...value\n        }\n    }else{\n        options[key]=value\n    }\n}","import {overrideImage} from './proxy';\nimport RequestHandler from './handler';\nimport {RequestAbleList} from './handler'\nimport {requestListFactory,logListFactory} from './queue/index'\nimport {InterceptorIOCTool} from './queue/index'\nimport {mergeOptions,extendOptions} from './options/default'\nimport RequestList from './queue/request';\nimport LogList from './queue/log';\nexport default class logScheduler {\n  private options:Options;\n  public requestList:RequestList;\n  public logList:LogList;\n  private interceptorIOCTool:InterceptorIOCTool;\n  private interceptor:Interceptor={\n    request:()=>{return true},\n    response:()=>{return new Promise((reslove)=>{reslove(true)})}\n  };\n  constructor(options:any) {\n    this.options=mergeOptions(options)\n    this.initRequestQueue()\n    this.initInterceptor()\n    this.initObserver();\n  }\n  // 初始化图片劫持和请求观测\n  private initObserver() {\n    overrideImage(this.interceptor.request)\n     new RequestHandler(this.interceptor,new RequestAbleList(this.logList));\n  }\n  // 初始化请求队列和打点队列\n  private initRequestQueue(){\n      this.requestList=requestListFactory()\n      this.logList=logListFactory(this.options)\n  }\n  // 初始化拦截器\n  private initInterceptor(){\n      this.interceptorIOCTool=new InterceptorIOCTool(\n        this.requestList,this.logList\n      )\n      this.interceptor.request=this.interceptorIOCTool.createRequestInterceptor()\n      this.interceptor.response=this.interceptorIOCTool.createResponseInterceptor(this.options)\n  }\n  // 动态添加url\n  public prefetch(url:string){\n    extendOptions(this.options,\"log\",url)\n  }\n}\n"],"names":["rowImage","tag","overrideImage","callback","width","height","img","target","prototype","receiver","value","BaseList","__publicField","item","deletedItem","deletedIndex","setImageDomObserve","targetNode","observerOptions","RequestList","reslove","LogList","options","getCurrentRequestFn","url","logRegList","reg","logInfoItem","xhrPromiseFactory","imagePromiseFactory","resolve","xhr","requestListFactory","logListFactory","logObjectFactory","type","xhrInstance","data","InterceptorIOCTool","requestList","logList","vm","logObject","RequestHandler","interceptor","requestAbleList","open","send","method","async","user","password","entries","entry","RequestAbleList","logItem","isType","obj","cloneDeep","cache","temp","param","key","defaultOptions","mergeOptions","userOptions","baseOptions","extendOptions","logScheduler"],"mappings":"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"}