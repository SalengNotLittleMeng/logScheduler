{"version":3,"file":"logScheduler.js","sources":["../src/logObserver/index.js","../src/xhr/index.js","../src/main.js"],"sourcesContent":["export default class ImageObserver {\r\n  constructor() {\r\n    this.rowImage = null;\r\n    this.overrideImage();\r\n  }\r\n  // 重写原生的Image对象，做到监控项目中所有的打点\r\n  overrideImage() {\r\n    const _Image = (this.rowImage = Image);\r\n    const vm = this;\r\n    window.Image = function (...params) {\r\n      const img = new _Image(...params);\r\n      let val = '';\r\n      // 劫持对象中的src，当重设src时判断是否是打点请求\r\n      Object.defineProperty(img, 'src', {\r\n        get() {\r\n          return val;\r\n        },\r\n        set(newValue) {\r\n          if (vm.isLogger(newValue)) {\r\n          }\r\n          val = newValue;\r\n        },\r\n      });\r\n      return img;\r\n    };\r\n  }\r\n  // 判断是否是log\r\n  isLogger(url) {\r\n    if (typeof url !== 'string') {\r\n      return false;\r\n    }\r\n    if (url.indexOf('log.gif') !== -1) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n","export default class XhrHandler {\r\n  // 对xhr进行重写，获取正在请求的xhr数目\r\n  constructor() {\r\n    (this.currentXhrNumber = 0), this.overrideXhr();\r\n  }\r\n  overrideXhr() {\r\n    const vm = this;\r\n    const { open, send } = XMLHttpRequest.prototype;\r\n    XMLHttpRequest.prototype.open = function (method, url, async, user, password) {\r\n      vm.currentXhrNumber++;\r\n      open.apply(this, arguments);\r\n    };\r\n    XMLHttpRequest.prototype.send = function (data) {\r\n      this.addEventListener('readystatechange', function () {\r\n        if (this.readyState === 4) {\r\n          vm.currentXhrNumber > 0 && vm.currentXhrNumber--;\r\n        }\r\n      });\r\n      send.apply(this, arguments);\r\n    };\r\n  }\r\n  getXhrNumber() {\r\n    return this.currentXhrNumber;\r\n  }\r\n}\r\n","import ImageObserver from './logObserver';\r\nimport XhrHandler from './xhr';\r\nexport default class logScheduler {\r\n  constructor(options) {\r\n    this.options = options;\r\n    this.imageManager = null;\r\n    this.xhrManager = null;\r\n    this.initObserver();\r\n  }\r\n  initObserver() {\r\n    this.imageManager = new ImageObserver();\r\n    this.xhrManager = new XhrHandler();\r\n  }\r\n}\r\n"],"names":["ImageObserver","_Image","vm","params","img","val","newValue","url","XhrHandler","open","send","method","async","user","password","data","logScheduler","options"],"mappings":"AAAe,MAAMA,EAAc;AAAA,EACjC,cAAc;AACZ,SAAK,WAAW,MAChB,KAAK,cAAa;AAAA,EACnB;AAAA;AAAA,EAED,gBAAgB;AACd,UAAMC,IAAU,KAAK,WAAW,OAC1BC,IAAK;AACX,WAAO,QAAQ,YAAaC,GAAQ;AAClC,YAAMC,IAAM,IAAIH,EAAO,GAAGE,CAAM;AAChC,UAAIE,IAAM;AAEV,oBAAO,eAAeD,GAAK,OAAO;AAAA,QAChC,MAAM;AACJ,iBAAOC;AAAA,QACR;AAAA,QACD,IAAIC,GAAU;AACZ,UAAIJ,EAAG,SAASI,CAAQ,GAExBD,IAAMC;AAAA,QACP;AAAA,MACT,CAAO,GACMF;AAAA,IACb;AAAA,EACG;AAAA;AAAA,EAED,SAASG,GAAK;AACZ,WAAI,OAAOA,KAAQ,WACV,KAELA,EAAI,QAAQ,SAAS,MAAM;AAAA,EAIhC;AACH;ACpCe,MAAMC,EAAW;AAAA;AAAA,EAE9B,cAAc;AACZ,IAAC,KAAK,mBAAmB,GAAI,KAAK,YAAW;AAAA,EAC9C;AAAA,EACD,cAAc;AACZ,UAAMN,IAAK,MACL,EAAE,MAAAO,GAAM,MAAAC,MAAS,eAAe;AACtC,mBAAe,UAAU,OAAO,SAAUC,GAAQJ,GAAKK,GAAOC,GAAMC,GAAU;AAC5E,MAAAZ,EAAG,oBACHO,EAAK,MAAM,MAAM,SAAS;AAAA,IAChC,GACI,eAAe,UAAU,OAAO,SAAUM,GAAM;AAC9C,WAAK,iBAAiB,oBAAoB,WAAY;AACpD,QAAI,KAAK,eAAe,KACtBb,EAAG,mBAAmB,KAAKA,EAAG;AAAA,MAExC,CAAO,GACDQ,EAAK,MAAM,MAAM,SAAS;AAAA,IAChC;AAAA,EACG;AAAA,EACD,eAAe;AACb,WAAO,KAAK;AAAA,EACb;AACH;ACtBe,MAAMM,EAAa;AAAA,EAChC,YAAYC,GAAS;AACnB,SAAK,UAAUA,GACf,KAAK,eAAe,MACpB,KAAK,aAAa,MAClB,KAAK,aAAY;AAAA,EAClB;AAAA,EACD,eAAe;AACb,SAAK,eAAe,IAAIjB,KACxB,KAAK,aAAa,IAAIQ;EACvB;AACH;"}