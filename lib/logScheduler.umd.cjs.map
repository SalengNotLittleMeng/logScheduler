{"version":3,"file":"logScheduler.umd.cjs","sources":["../src/proxy/index.js","../src/handler/index.js","../src/queue/base.js","../src/queue/request.js","../src/queue/log.js","../src/queue/index.js","../src/main.js"],"sourcesContent":["export const rowImage=Image\nlet tag=false\n  // 重写原生的Image对象，做到监控项目中所有的打点\nexport function overrideImage(callback){\n    if(tag){return}\n    tag=true\n    window.Image = function (...params) {\n      const img = new rowImage(...params);\n      let val = '';\n      // 劫持对象中的src，当重设src时判断是否是打点请求\n      let proxy = new Proxy(img, {\n        get(target,prototype){\n            return target[prototype]\n        },\n        set(target,prototype,value){\n          if(prototype=='src'){\n           if(callback(value)){\n            //当为打点信息时，走拦截器逻辑并在此处阻止打点请求\n              target[prototype]=''\n              return true\n           }\n          }\n          target[prototype]=value\n          return true\n        }\n      })\n      return proxy\n    }\n  }\n","export default class RequestHandler {\n  // 对xhr进行重写，获取正在请求的xhr数目\n  constructor(interceptor={}) {\n    this.interceptor=interceptor\n     this.setRequestHandler();\n     this.setResponseHandler();\n  }\n  //劫持xhr，在每次请求时出发请求拦截器\n  setRequestHandler() {\n    const { open, send } = XMLHttpRequest.prototype;\n    const vm=this\n    XMLHttpRequest.prototype.open = function (method, url, async, user, password) {\n      vm.interceptor.resquest(url)\n      open.apply(this, arguments);\n    };\n  }\n  // 对请求和图片请求成功的毁掉添加响应拦截，避免劫持xhr响应回掉时跟其他SDK的冲突\n  setResponseHandler(){\n    const vm=this\n    let observer = new PerformanceObserver(function (entries, observer) {\n      entries.getEntries().forEach((entry) => {\n          if(['img','xmlhttprequest'].includes(entry.initiatorType)){\n            vm.interceptor.response(entry.name)\n          }\n      });\n    });\n    observer.observe({ entryTypes: ['resource'] });\n  }\n}\n","//队列基类\nexport default class BaseList{\n    constructor(){\n      this.list=[]\n    }\n    add(item){\n      this.list.push(item)\n    }\n    delete(deletedItem){\n      const deletedIndex=this.list.findIndex(item=>item==deletedItem)\n      deletedIndex!=-1 && this.list.splice(deletedIndex,1)\n    }\n    getLength(){\n      return this.list.length\n    }\n    clear(){\n       while(this.list.length){\n        this.list.pop()\n       }\n    }\n  }","import BaseList from './base'\n//设置节点变动监控，当变化时查找新的图片请求\nfunction setImageDomObserve(callback){\n    let targetNode = document.querySelector(\"body\");\n    let observerOptions = {\n      childList: true, \n      attributes: true, \n      subtree: true    \n    }\n    \n    let observer = new MutationObserver(callback);\n    observer.observe(targetNode, observerOptions);\n  }\n  \n  // 请求队列\n  export default class RequestList extends BaseList {\n    constructor() {\n      super()\n      setImageDomObserve(this.getCurrentImageResquest.bind(this))\n    }\n    // 查找出目前正在发生的图片请求\n    getCurrentImageResquest(){\n       const imageList= Array.from(document.querySelectorAll('img[src]'))\n       imageList.filter(img=>!img.complete).forEach(img=>{\n            this.add(img.currentSrc)\n            img.addEventListener('error',()=>{\n              this.delete(img.currentSrc)\n            })\n       })\n    }\n  }","import BaseList from './base'\nimport { rowImage } from '../proxy'\n//打点队列\nexport default class LogList extends BaseList{\n    constructor(options={}){\n      super()\n      this.options=options\n    }\n    // 判断是否是log\n    isLogger(url) {\n      const logReg=new RegExp(this.options.log || /.gif/)\n      if (typeof url !== 'string') {\n        return false;\n      }\n      if (logReg.test(url)) {\n        return true;\n      }\n      return false;\n    }\n     async requestLog(){\n        const requestList=this.list.map(url=>{\n          return new Promise((reslove,reject)=>{\n              const img=new rowImage()\n              img.src=url\n              reslove()\n          })\n        })\n        await Promise.all(requestList)\n     }\n  }","import RequestList from './request'\nimport LogList from './log'\nlet request=null\nlet log=null\n//这里工厂+单例，方便后期动态修改或添加配置\nexport function requestListFactory(options){\n    if(!request){\n      return new RequestList(options)\n    }\n    return request\n}\nexport function logListFactory(options){\n   if(!log){\n    return new LogList(options)\n   }\n   return log\n}\n// 解耦工具类，将主类和队列类进行解耦\nexport class InterceptorIOCTool{\n  constructor(requestList,logList,options={}){\n      this.requestList=requestList\n      this.logList=logList\n  }\n  createRequestInterceptor(){\n    return function(url){\n      if(this.logList.isLogger(url)){\n        this.logList.add(url)\n        return true\n      }\n      this.requestList.add(url)\n      return false\n    }.bind(this)\n  }\n  createResponseInterceptor(){\n    return function(url){\n      if(!this.logList.isLogger(url)){\n        this.requestList.delete(url)\n      } else{\n        // 如果是log,直接返回，防止递归死循环\n        return\n      }\n      if(this.requestList.getLength()==0){\n          this.logList.requestLog()\n      }\n    }.bind(this)\n  }\n}\n","import {overrideImage} from './proxy';\nimport RequestHandler from './handler';\nimport {requestListFactory,logListFactory} from './queue/index'\nimport {InterceptorIOCTool} from './queue/index'\nexport default class logScheduler {\n  constructor(options) {\n    this.options = options;\n    this.requestHandler = null;\n    this.requestList=null;\n    this.logList=null;\n    this.interceptor={}\n    this.initRequestQueue()\n    this.initInterceptor()\n    this.initObserver();\n  }\n  // 初始化图片劫持和请求观测\n  initObserver() {\n    overrideImage(this.initInterceptor.resquest)\n    this.requestHandler = new RequestHandler(this.initInterceptor);\n  }\n  // 初始化请求队列和打点队列\n  initRequestQueue(){\n      this.requestList=requestListFactory(this.options)\n      this.logList=logListFactory(this.options)\n  }\n  // 初始化拦截器\n  initInterceptor(){\n      const interceptorIOCTool=new InterceptorIOCTool(\n        this.requestList,this.logList\n      )\n      this.initInterceptor.resquest=interceptorIOCTool.createRequestInterceptor()\n      this.initInterceptor.response=interceptorIOCTool.createResponseInterceptor()\n  }\n}\n"],"names":["rowImage","tag","overrideImage","callback","params","img","target","prototype","value","RequestHandler","interceptor","open","send","vm","method","url","async","user","password","entries","observer","entry","BaseList","item","deletedItem","deletedIndex","setImageDomObserve","targetNode","observerOptions","RequestList","LogList","options","logReg","requestList","reslove","reject","requestListFactory","logListFactory","InterceptorIOCTool","logList","logScheduler","interceptorIOCTool"],"mappings":"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"}