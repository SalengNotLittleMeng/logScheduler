{"version":3,"file":"logScheduler.umd.cjs","sources":["../src/logObserver/index.js","../src/xhr/index.js","../src/main.js"],"sourcesContent":["export default class ImageObserver {\r\n  constructor() {\r\n    this.rowImage = null;\r\n    this.overrideImage();\r\n  }\r\n  // 重写原生的Image对象，做到监控项目中所有的打点\r\n  overrideImage() {\r\n    const _Image = (this.rowImage = Image);\r\n    const vm = this;\r\n    window.Image = function (...params) {\r\n      const img = new _Image(...params);\r\n      let val = '';\r\n      // 劫持对象中的src，当重设src时判断是否是打点请求\r\n      Object.defineProperty(img, 'src', {\r\n        get() {\r\n          return val;\r\n        },\r\n        set(newValue) {\r\n          if (vm.isLogger(newValue)) {\r\n          }\r\n          val = newValue;\r\n        },\r\n      });\r\n      return img;\r\n    };\r\n  }\r\n  // 判断是否是log\r\n  isLogger(url) {\r\n    if (typeof url !== 'string') {\r\n      return false;\r\n    }\r\n    if (url.indexOf('log.gif') !== -1) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n","export default class XhrHandler {\r\n  // 对xhr进行重写，获取正在请求的xhr数目\r\n  constructor() {\r\n    (this.currentXhrNumber = 0), this.overrideXhr();\r\n  }\r\n  overrideXhr() {\r\n    const vm = this;\r\n    const { open, send } = XMLHttpRequest.prototype;\r\n    XMLHttpRequest.prototype.open = function (method, url, async, user, password) {\r\n      vm.currentXhrNumber++;\r\n      open.apply(this, arguments);\r\n    };\r\n    XMLHttpRequest.prototype.send = function (data) {\r\n      this.addEventListener('readystatechange', function () {\r\n        if (this.readyState === 4) {\r\n          vm.currentXhrNumber > 0 && vm.currentXhrNumber--;\r\n        }\r\n      });\r\n      send.apply(this, arguments);\r\n    };\r\n  }\r\n  getXhrNumber() {\r\n    return this.currentXhrNumber;\r\n  }\r\n}\r\n","import ImageObserver from './logObserver';\r\nimport XhrHandler from './xhr';\r\nexport default class logScheduler {\r\n  constructor(options) {\r\n    this.options = options;\r\n    this.imageManager = null;\r\n    this.xhrManager = null;\r\n    this.initObserver();\r\n  }\r\n  initObserver() {\r\n    this.imageManager = new ImageObserver();\r\n    this.xhrManager = new XhrHandler();\r\n  }\r\n}\r\n"],"names":["ImageObserver","_Image","vm","params","img","val","newValue","url","XhrHandler","open","send","method","async","user","password","data","logScheduler","options"],"mappings":"6NAAe,MAAMA,CAAc,CACjC,aAAc,CACZ,KAAK,SAAW,KAChB,KAAK,cAAa,CACnB,CAED,eAAgB,CACd,MAAMC,EAAU,KAAK,SAAW,MAC1BC,EAAK,KACX,OAAO,MAAQ,YAAaC,EAAQ,CAClC,MAAMC,EAAM,IAAIH,EAAO,GAAGE,CAAM,EAChC,IAAIE,EAAM,GAEV,cAAO,eAAeD,EAAK,MAAO,CAChC,KAAM,CACJ,OAAOC,CACR,EACD,IAAIC,EAAU,CACRJ,EAAG,SAASI,CAAQ,EAExBD,EAAMC,CACP,CACT,CAAO,EACMF,CACb,CACG,CAED,SAASG,EAAK,CACZ,OAAI,OAAOA,GAAQ,SACV,GAELA,EAAI,QAAQ,SAAS,IAAM,EAIhC,CACH,CCpCe,MAAMC,CAAW,CAE9B,aAAc,CACX,KAAK,iBAAmB,EAAI,KAAK,YAAW,CAC9C,CACD,aAAc,CACZ,MAAMN,EAAK,KACL,CAAE,KAAAO,EAAM,KAAAC,GAAS,eAAe,UACtC,eAAe,UAAU,KAAO,SAAUC,EAAQJ,EAAKK,EAAOC,EAAMC,EAAU,CAC5EZ,EAAG,mBACHO,EAAK,MAAM,KAAM,SAAS,CAChC,EACI,eAAe,UAAU,KAAO,SAAUM,EAAM,CAC9C,KAAK,iBAAiB,mBAAoB,UAAY,CAChD,KAAK,aAAe,GACtBb,EAAG,iBAAmB,GAAKA,EAAG,kBAExC,CAAO,EACDQ,EAAK,MAAM,KAAM,SAAS,CAChC,CACG,CACD,cAAe,CACb,OAAO,KAAK,gBACb,CACH,CCtBe,MAAMM,CAAa,CAChC,YAAYC,EAAS,CACnB,KAAK,QAAUA,EACf,KAAK,aAAe,KACpB,KAAK,WAAa,KAClB,KAAK,aAAY,CAClB,CACD,cAAe,CACb,KAAK,aAAe,IAAIjB,EACxB,KAAK,WAAa,IAAIQ,CACvB,CACH"}