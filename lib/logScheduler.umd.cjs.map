{"version":3,"file":"logScheduler.umd.cjs","sources":["../src/proxy/index.ts","../src/queue/base.ts","../src/queue/request.ts","../src/queue/log.ts","../src/queue/index.ts","../src/handler/index.ts","../src/utils.ts","../src/options/default.ts","../src/main.ts"],"sourcesContent":["export const rowImage=Image\nlet tag=false\n  // 重写原生的Image对象，做到监控项目中所有的打点\nexport function overrideImage(callback:(arg0:string,arg1:LogType)=>boolean){\n    if(tag){return}\n    tag=true\n    window.Image = function (width?:number|undefined,height?:number|undefined,) {\n      const img = new rowImage(width,height);\n      // 劫持对象中的src，当重设src时判断是否是打点请求\n      let proxy = new Proxy(img, {\n        get(target,prototype,receiver){\n            return Reflect.get(target, prototype, receiver)\n        },\n        set(target,prototype,value,receiver){\n          if(prototype=='src'){\n           if(callback(value,'image')){\n            //当为打点信息时，走拦截器逻辑并在此处阻止打点请求\n              target[prototype]=''\n              return true\n           }\n          }  \n          return Reflect.set(target, prototype, value, receiver)\n        }\n      })\n      return proxy\n    } as unknown as new (width?: number | undefined, height?: number | undefined)=> HTMLImageElement\n  }\n","//队列范型类\nexport default class BaseList<T>{\n    list:Array<T>=[]\n    constructor(){\n    }\n    add(item:T){\n      this.list.push(item)\n    }\n    delete(deletedItem:T){\n      const deletedIndex=this.list.findIndex(item=>item==deletedItem)\n      deletedIndex!=-1 && this.list.splice(deletedIndex,1)\n    }\n    getLength(){\n      return this.list.length\n    }\n    includes(item:T){\n      return this.list.includes(item)\n    }\n    clear(){\n       while(this.list.length){\n        this.list.pop()\n       }\n    }\n  }","import BaseList from './base'\n//设置节点变动监控，当变化时查找新的图片请求\nfunction setImageDomObserve(callback:()=>void){\n    let targetNode = document.querySelector(\"body\")||document.createElement('div');\n    let observerOptions = {\n      childList: true, \n      attributes: true, \n      subtree: true    \n    }\n    let observer = new MutationObserver(callback);\n    observer.observe(targetNode, observerOptions);\n  }\n  \n  // 请求队列\n  export default class RequestList extends BaseList<string> {\n    constructor() {\n      super()\n      setImageDomObserve(this.getCurrentImageResquest.bind(this))\n    }\n    // 这里增加异步操作，考虑请求连续增长的问题\n    async getLengthAsync(): Promise<number>{\n      return new Promise((reslove)=>{\n          setTimeout(()=>{\n            reslove(this.getLength())\n          },0)\n      })\n    }\n    // 查找出目前正在发生的图片请求\n    getCurrentImageResquest(){\n       const imageList=Array.from(document.querySelectorAll('img[src]')) as HTMLImageElement[]\n       imageList.filter(img=>!img.complete).forEach(img=>{\n            this.add(img.currentSrc)\n       })\n    }\n  }","import BaseList from './base'\nimport { rowImage } from '../proxy'\n//打点队列\nexport default class LogList extends BaseList<LogListItem>{\n    options:Options;\n    getCurrentRequestFn:()=>Promise<number>;\n    constructor(options:Options){\n      super()\n      this.options=options;\n    }\n    async add(item: LogListItem): Promise<void>{\n      this.list.push(item) \n      // 当前本身就是空置时直接触发\n      if(await this.getCurrentRequestFn()<=this.options.trigger){\n          this.requestLog()\n      }\n    }\n    // 获取请求数目的接口\n    getCurrentRequestImpl(getCurrentRequestFn:()=>Promise<number>){\n       this.getCurrentRequestFn=getCurrentRequestFn\n    }\n    // 判断是否是log\n    isLogger(url:url):boolean {\n      const logRegList=this.options.log.map(item=>{\n        return new RegExp(item)\n      })\n      if (typeof url !== 'string') {\n        return false;\n      }\n      if (logRegList.some(reg=>{\n        return reg.test(url)\n      })) {\n        return true;\n      }\n      return false;\n    }\n    // 执行请求\n     async requestLog(){\n      this.list.map(logInfoItem=>{\n        this.delete(logInfoItem)\n        switch(logInfoItem.type){\n          case 'xhr':{\n            xhrPromiseFactory(logInfoItem as LogListItemXhr)\n            break;\n          }\n          case 'image':{\n            imagePromiseFactory(logInfoItem.url)\n            break;\n          }\n        }\n      })\n      }\n  }\n  function xhrPromiseFactory(logInfoItem:LogListItemXhr){\n    return new Promise<string>((resolve)=>{\n        try{\n          const xhr=logInfoItem.instance\n          xhr.addEventListener(\"load\", function () {\n            if (xhr.readyState == 4 && xhr.status == 200) {\n                resolve(logInfoItem.url)\n            }\n          });\n          xhr.addEventListener(\"error\",function(){\n              resolve(logInfoItem.url)\n          })\n          logInfoItem.instance.send(logInfoItem.data)\n        }catch(e){}\n    })\n  }\n  function imagePromiseFactory(url:string){\n    return new Promise<string>((reslove)=>{\n      const img=new rowImage()\n      img.src=url\n      img.onload=function(){\n        reslove(url)\n      }\n      img.onerror=function(){\n        reslove(url)\n      }\n  })\n  }","import RequestList from './request'\nimport LogList from './log'\nlet request:RequestList|null=null\nlet log:LogList|null=null\n//这里工厂+单例，方便后期动态修改或添加配置\nexport function requestListFactory():RequestList{\n    if(!request){\n      return new RequestList()\n    }\n    return request\n}\nexport function logListFactory(options:Options):LogList{\n   if(!log){\n    return new LogList(options)\n   }\n   return log\n}\nexport function logObjectFactory(url:url,type:LogType,xhrInstance?:XMLHttpRequest,data?:XMLHttpRequestData):LogListItem{\n  return {\n    url:url.toString(),\n    type,\n    instance:xhrInstance,\n    data\n  }\n}\n// 解耦工具类，将主类和队列类进行解耦\nexport class InterceptorIOCTool{\n  requestList:RequestList\n  logList:LogList\n  constructor(requestList:RequestList,logList:LogList){\n      this.requestList=requestList\n      this.logList=logList\n      this.logList.getCurrentRequestImpl(this.getCurrentRequest.bind(this))\n  }\n  getCurrentRequest(){\n     return this.requestList.getLengthAsync()\n  }\n  createRequestInterceptor(){\n    const vm=this\n    return function(url:url,type:LogType){\n      const logObject=logObjectFactory(url,type)\n      if(vm.logList.isLogger(url)){\n        vm.logList.add(logObject)\n        return true\n      }\n      vm.requestList.add(url.toString())\n      return false\n    }\n  }\n  createResponseInterceptor(options:Options){\n    const vm=this\n    return async function(url:string | URL){\n      if(!vm.logList.isLogger(url)){\n        vm.requestList.delete(url.toString())\n      } else{\n        // 如果是log,直接返回，防止递归死循环\n        return false\n      }\n      if(await vm.requestList.getLengthAsync()<=options.trigger){\n          vm.logList.requestLog()\n      }\n      return true\n    }\n  }\n}\n","import LogList from \"../queue/log\";\nimport {logObjectFactory} from '../queue/index'\nexport default class RequestHandler {\n  // 对xhr进行重写，获取正在请求的xhr数目\n  private interceptor;\n  private requestAbleList;\n  constructor(interceptor:Interceptor,requestAbleList:RequestAbleList) {\n    this.interceptor=interceptor\n    this.requestAbleList=requestAbleList\n     this.setRequestHandler();\n     this.setResponseHandler();\n  }\n  //劫持xhr，在每次请求时出发请求拦截器\n  setRequestHandler() {\n    const { open,send } = XMLHttpRequest.prototype;\n    const vm=this\n    XMLHttpRequest.prototype.open = function (this:any,method, url, async, user, password) {\n      vm.interceptor.request(url,'xhr')\n      open.call(this, method,url,async,user,password);\n    } as { \n      (method: string, url: string | URL): void;\n      (method: string, url: string | URL, async: boolean, username?: string | null | undefined, password?: string | null | undefined): void;\n        }\n    XMLHttpRequest.prototype.send=function(data:Document|XMLHttpRequestBodyInit|null|undefined){\n        if(vm.requestAbleList.include(this.responseURL)){\n           vm.requestAbleList.add(this.responseURL,this,data)\n           return\n        }\n        send.call(this,data)\n    }\n  }\n  // 对请求和图片请求成功的毁掉添加响应拦截，避免劫持xhr响应回掉时跟其他SDK的冲突\n  setResponseHandler(){\n    const vm=this\n    let observer = new PerformanceObserver(function (entries) {\n      entries.getEntries().forEach((entry) => {\n          if(['img','xmlhttprequest'].includes((entry as PerformanceEntryResource).initiatorType)){\n            vm.interceptor.response(entry.name)\n          }\n      });\n    });\n    observer.observe({ entryTypes: ['resource'] });\n  }\n} \n// XHR打点请求类\nexport class RequestAbleList{\n  public requestAbleList:string[]\n  private logList:LogList\n  constructor(logList:LogList){\n    this.logList=logList\n  }\n  include(url:string){\n    return this.logList.list.find(logItem=>{\n        return logItem.url===url\n    })\n  }\n  add(url:string,xhr:XMLHttpRequest,data:XMLHttpRequestData){\n    this.logList.add(logObjectFactory(url,'xhr',xhr,data))\n  }\n}\n\n\n","// 并发控制函数，每当一个请求返回就会执行下一个\nexport function  multiRequest(urls:string[], maxNum:number,\n    decorator:(url:string)=>Promise<undefined>){\n    let count=0\n    return new Promise(function(resolve){\n        while(count<maxNum){\n        next()\n        count++\n    }\n    function next(){\n        console.log(count,urls)\n        if(count>urls.length){\n            resolve(count)\n            return\n        }\n        decorator(urls[count]).finally(()=>{\n            count++\n            next()\n        })\n    }\n    })\n}\n\nexport enum CloneType {\n    Object = \"Object\",\n    Array = \"Array\",\n    Date = \"Date\",\n    RegExp = \"RegExp\",\n    Function = \"Function\",\n    String = \"String\",\n    Number = \"Number\",\n    Boolean = \"Boolean\",\n    Undefined = \"Undefined\",\n    Null = \"Null\",\n    Symbol = \"Symbol\",\n    Set = \"Set\",\n    Map = \"Map\"\n}\n\nexport type _CloneType = keyof typeof CloneType\n\n/**\n * 检测数据类型\n * @param type cloneType\n * @param obj 检测的数据源\n * @returns Boolean\n */\nfunction isType<T>(type: _CloneType, obj: T) {\n    return Object.prototype.toString.call(obj) === `[object ${type}]`;\n}\n\n/**\n * 深拷贝\n * @param obj 要克隆的对象\n * @param cache 缓存对象，用于解决循环引用的问题\n *  */\nexport function cloneDeep<T>(obj: T, cache = new WeakMap()): T {\n    // 如果不是对象或者是null，直接返回（终止条件）\n    if (typeof obj !== 'object' || obj === null) {\n        return obj\n    }\n\n    // 如果类型是Symbol，直接返回一个新的Symbol\n    if (isType(CloneType.Symbol, obj)) {\n        return obj.constructor((obj as unknown as Symbol).description)\n    }\n    // 如果已经缓存过，直接返回缓存的值\n    if (cache.has(obj)) {\n        return cache.get(obj)\n    }\n\n    // 初始化返回结果\n    let temp: T, param: T\n    // 如果是日期对象，直接返回一个新的日期对象\n    if (isType(CloneType.Date, obj) || isType(CloneType.RegExp, obj)) {\n        param = obj\n    }\n    // @ts-ignore\n    temp = new obj!.constructor(param)\n    // 如果是数组或者对象，需要遍历\n    if (isType(CloneType.Array, obj) || isType(CloneType.Object, obj)) {\n        Object.keys(obj)\n            .forEach(key => {\n                if (obj.hasOwnProperty(key)) {\n                        // @ts-ignore\n                    \n                    temp[key] = cloneDeep(obj[key], cache)\n                }\n            })\n    }\n    // 如果是Set\n    if (isType(CloneType.Set, obj)) {\n        for (let value of (obj as unknown as Set<T>)) {\n            (temp as Set<T>).add(cloneDeep(value, cache))\n        }\n    }\n    // 如果是Map\n    if (isType(CloneType.Map, obj)) {\n        for (let [key, value] of (obj as unknown as Map<T, T>)) {\n            (temp as Map<T, T>).set(cloneDeep(key, cache), cloneDeep(value, cache))\n        }\n    }\n    // 缓存值\n    cache.set(obj, temp)\n    return temp\n  }","import {cloneDeep} from '../utils'\n// 默认配置对象\nconst defaultOptions={ \n    max:5,  \n    trigger:3,\n    log:[]\n}\n\nexport function mergeOptions(userOptions:Options){\n    // 这里要考虑数组的扩展问题\n    const baseOptions:Options=cloneDeep(defaultOptions)\n   Object.keys(baseOptions).forEach((key)=>{\n        if(Array.isArray(baseOptions[key])){\n            if(Array.isArray(userOptions[key])){\n                baseOptions[key] =  (baseOptions[key] as LogOptionItem[]).concat(userOptions[key])\n            }else{\n                userOptions[key] && (baseOptions[key] as LogOptionItem[]).push(userOptions[key])\n            }\n        }else{\n           ( baseOptions[key] as number)=userOptions[key] as number\n           ?userOptions[key]:baseOptions[key]\n        }\n   })\n   baseOptions.log=baseOptions.log.filter(item=>item)\n   return baseOptions\n}","import {overrideImage} from './proxy';\nimport RequestHandler from './handler';\nimport {RequestAbleList} from './handler'\nimport {requestListFactory,logListFactory} from './queue/index'\nimport {InterceptorIOCTool} from './queue/index'\nimport {mergeOptions} from './options/default'\nimport RequestList from './queue/request';\nimport LogList from './queue/log';\nexport default class logScheduler {\n  private options:Options;\n  public requestList:RequestList;\n  public logList:LogList;\n  private interceptorIOCTool:InterceptorIOCTool;\n  interceptor:Interceptor={\n    request:()=>{return true},\n    response:()=>{return new Promise((reslove)=>{reslove(true)})}\n  };\n  constructor(options:any) {\n    this.options=mergeOptions(options)\n    this.initRequestQueue()\n    this.initInterceptor()\n    this.initObserver();\n  }\n  // 初始化图片劫持和请求观测\n  initObserver() {\n    overrideImage(this.interceptor.request)\n     new RequestHandler(this.interceptor,new RequestAbleList(this.logList));\n  }\n  // 初始化请求队列和打点队列\n  initRequestQueue(){\n      this.requestList=requestListFactory()\n      this.logList=logListFactory(this.options)\n  }\n  // 初始化拦截器\n  initInterceptor(){\n      this.interceptorIOCTool=new InterceptorIOCTool(\n        this.requestList,this.logList\n      )\n      this.interceptor.request=this.interceptorIOCTool.createRequestInterceptor()\n      this.interceptor.response=this.interceptorIOCTool.createResponseInterceptor(this.options)\n  }\n}\n"],"names":["rowImage","tag","overrideImage","callback","width","height","img","target","prototype","receiver","value","BaseList","__publicField","item","deletedItem","deletedIndex","setImageDomObserve","targetNode","observerOptions","RequestList","reslove","LogList","options","getCurrentRequestFn","url","logRegList","reg","logInfoItem","xhrPromiseFactory","imagePromiseFactory","resolve","xhr","requestListFactory","logListFactory","logObjectFactory","type","xhrInstance","data","InterceptorIOCTool","requestList","logList","vm","logObject","RequestHandler","interceptor","requestAbleList","open","send","method","async","user","password","entries","entry","RequestAbleList","logItem","isType","obj","cloneDeep","cache","temp","param","key","defaultOptions","mergeOptions","userOptions","baseOptions","logScheduler"],"mappings":"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"}